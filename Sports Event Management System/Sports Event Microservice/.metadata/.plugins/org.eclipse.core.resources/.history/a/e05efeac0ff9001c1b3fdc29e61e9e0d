package com.sports.event.controller;

/*
 * To deliver the status code we use Response Entity class which is a child class of http entity.*/
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.sports.event.entity.Events;
import com.sports.event.entity.Sports;
import com.sports.event.service.SportsEventService;
import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
@RequestMapping("/sem")
public class SportsEventController {

	@Autowired
	private SportsEventService ss;

	// Completed
	@GetMapping("/addSport")
	public ResponseEntity<String> addSport(@RequestBody Sports sport) {
		log.info("Inside listAllSportsDetails method of the Sports Controller.");
		if (ss.addSport(sport)) {
			return new ResponseEntity<>(sport.getSportsName() + " added successfully. ", HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(sport.getSportsName() + " not added. ", HttpStatus.BAD_REQUEST);
		}
	}

	// Completed
	@GetMapping("/sports")
	public ResponseEntity<List<Sports>> listAllSportsDetails() {
		log.info("Inside listAllSportsDetails method of the Sports Controller.");
		List<Sports> sList = ss.listAllSportsDetails();
		if (sList.size() <= 0) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		return ResponseEntity.of(Optional.of(sList));
	}

	// Completed
	@GetMapping("/sports/{sportName}")
	public ResponseEntity<Sports> getSportsByName(@PathVariable("sportName") String sportName) {
		log.info("Inside getSportsByName method of the Sports Controller.");
		Sports sport = ss.getSportsByName(sportName);
		if (sport == null) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		return ResponseEntity.of(Optional.of(sport));
	}

	// complete
	@PostMapping("/addEvent")
	public ResponseEntity<String> addEvent(@RequestBody Events event) {
		log.info("Inside addEvent method of the Sports Controller.");
		if (ss.addEvent(event)) {
			return new ResponseEntity<>(event.getEventName() + " added successfully. ", HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(event.getEventName() + " not added. ", HttpStatus.BAD_REQUEST);
		}
	}

	@DeleteMapping("/deleteEvent/{eventId}")
	public ResponseEntity<String> deleteEvent(@PathVariable("eventId") long eventId) {
		log.info("Inside delete method of the Sports Controller.");
		if(ss.deleteEvent(eventId)) {
			return new ResponseEntity<>("Event with eventId: "+eventId+ " deleted successfully. ", HttpStatus.OK);
		}
		else{
			return new ResponseEntity<>("Event with eventId: "+eventId+ " not get deleted. ", HttpStatus.EXPECTATION_FAILED);
		}
		

	@GetMapping("/events")
	public List<Events> events() {
		log.info("Inside events method of the Sports Controller.");
		return ss.events();
	}

	@GetMapping("/events/{eventName}")
	public Events eventsByName(@PathVariable("eventName") String eventName) {
		log.info("Inside eventNyName method of the Sports Controller.");
		return ss.eventsByName(eventName);
	}

}
