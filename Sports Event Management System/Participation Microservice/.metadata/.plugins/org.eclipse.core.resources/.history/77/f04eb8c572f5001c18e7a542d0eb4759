package com.participation.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.participation.entity.Participation;
import com.participation.service.ParticipationService;

@RestController
@RequestMapping("/pm")
public class ParticipationController {

	@Autowired
	private ParticipationService ps;

	@PostMapping("/addParticipation")
	public String addParticipation(@RequestBody Participation part) {
		return ps.addParticipation(part);
	}

	@GetMapping("/participations")
	public List<Participation> listAllParticipation() {
		return ps.listAllParticipation();
	}

	@PutMapping("/updateStatus/{partId}")
	public String updateStatus(Participation participation, @PathVariable("partId") Long partId) {
		return ps.updateStatus(participation,partId);
	}

	@GetMapping("/approvedParticipations")
	public List<Participation> listApprovedParticipations() {
		return ps.listApprovedParticipations();
	}

	@GetMapping("/declinedParticipations")
	public List<Participation> listDeclinedParticipations() {
		return ps.listDeclinedParticipations();
	}

	@GetMapping("/pendingParticipations")
	public List<Participation> listPendingParticipations(String status) {
		return ps.listPendingParticipations(status);
	}

}

/*
 * // show add product form
 * 
 * @RequestMapping("/") public String showHome(Model m) { List<Product> products
 * = productDao.allProduct(); m.addAttribute("product", products); return
 * "home"; }
 * 
 * // handle add product form
 * 
 * @RequestMapping("/add-product") public String addProduct(Model M) {
 * M.addAttribute("title", "Add-Product"); return "add_Product"; }
 * 
 * // handle product form
 * 
 * @RequestMapping(path = "/handle-product", method = RequestMethod.POST) public
 * RedirectView handleProduct(@ModelAttribute Product product,
 * HttpServletRequest request) { productDao.createProduct(product); RedirectView
 * redirectView = new RedirectView();
 * redirectView.setUrl(request.getContextPath() + "/"); return redirectView; }
 * 
 * // delete handler
 * 
 * @RequestMapping("/delete/{productId}") public RedirectView
 * deleteHandler(@PathVariable("productId") int id, HttpServletRequest request)
 * { this.productDao.deleteProduct(id); RedirectView re = new RedirectView();
 * re.setUrl(request.getContextPath() + "/"); return re; }
 * 
 * // Update Handler
 * 
 * @RequestMapping("/update/{productId}") public String
 * updateHandler(@PathVariable("productId") int id, Model m, HttpServletRequest
 * request) { Product pro=this.productDao.getProduct(id);
 * m.addAttribute("product", pro); return "update_form"; }
 * 
 */
